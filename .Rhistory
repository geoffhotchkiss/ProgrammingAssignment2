setwd("C:/Users/Geoff/Desktop/r-programming/ProgrammingAssignment2")
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(newinv) inv <<- newinv
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(x, ...)
x$setinv(inv)
inv
}
?matrix
m <- cbind(c(1,0,1), c(2,4,0), c(3,5,6))
m
solve(m)
cacheSolve(m)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(1:1000)
?data.frame
m
md <- data.frame(m)
md
cacheSolve(md)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(newinv) inv <<- newinv
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(x, ...)
x$setinv(inv)
inv
}
md
cacheSolve(md)
m
matrixObject <- makeCacheMatrix(m)
matrixObject
cacheSolve(matrixObject)
mat <- matrix(1:4,2,2)
solve(mat)
matrixObject <- makeCacheMatrix(mat)
cacheSolve(matrixObject)
?solve
cacheSolve(matrixObject)
?
a
m
mat
?type
type(mat)
?type
typeof(mat)
mat
matrix
?matrix
matrix(1:4,nrow=2)
cacheSolve(makeCacheMatrix(matrix(1:4,nrow=2)))
smat <- makeCacheMatrix (matrix (c(2,9,3,3,9,2,1,5,7), nrow=3, ncol=3))
smat$get()
cacheSolve(smat)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(newinv) inv <<- newinv
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
cacheSolve(smat)
mat <- matrix(1:4,2,2)
matrixObject <- makeCacheMatrix(mat)
cacheSolve(matrixObject)
cacheSolve(matrixObject)
library(datasets)
data(iris)
?iris
iris
iris$species
iris$Species
iris[iris$Species == "virginica"]
iris[iris$Species == "virginica"]
iris[iris$Species = "virginica"]
iris[iris$Species = "virginica", ]
iris[iris$Species == "virginica", ]
m <- iris[iris$Species == "virginica", ]
m
m$Sepal.Length
mean(m$Sepal.Length)
colMeans(iris)
iris[,1:4]
?apply
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
?tapply
?split
?sapply
